import matplotlib.pyplot as plt 
import numpy as np 
from scipy.interpolate import lagrange 
 
 
 
x=np.array([0,2,3,5], dtype = float) 
y=np.array([1,3,2,5], dtype = float) 
 
def lagranz(x,y,t): 
 z = 0 
 for j in range(len(y)): 
  p1=1 
  p2=1 
  for i in range(len(x)): 
   if i==j: 
    p1 = p1*1 
    p2 = p2*1 
   else: 
    p1=p1*(t-x[i]) 
    p2=p2*(x[j]-x[i]) 
  z=z+y[j]*p1/p2 
 return z 
 
   
xnew=np.linspace(np.min(x),np.max(x)) 
ynew=[lagranz(x,y,i) for i in xnew] 
plt.plot(x, y, 'o', xnew, ynew) 
plt.xlabel('x') 
plt.ylabel('y') 
plt.title('lagrange method') 
plt.legend(['x^3+4x^2+x-2'], loc = 'upper right') 
plt.grid() 
 
plt.show() 
n = 3  
yp = 0 
x1 = -1.5 
for i in range(len(x)): 
 p = 1 
 for j in range(len(y)): 
  if i != j: 
   p = p * (x1-x[j])/(x[i]-x[j]) 
 yp=yp+p*y[i] 
print('Interpolated value at ', x1, ' = ', yp) 
 
 
x2 = -0.5 
 
for i in range(len(x)): 
 p = 1 
 for j in range(len(y)): 
  if i != j: 
   p = p * (x2-x[j])/(x[i]-x[j]) 
 yp=yp+p*y[i] 
print('Interpolated value at ', x2, ' = ', yp) 
 
x3 =  1 
 
for i in range(len(x)): 
 p = 1 
 for j in range(len(y)): 
  if i != j: 
   p = p * (x3-x[j])/(x[i]-x[j]) 
 yp=yp+p*y[i] 
print('Interpolated value at ', x3, ' = ', yp) 
 
x4 = 2 
 
for i in range(len(x)): 
 p = 1 
 for j in range(len(y)): 
  if i != j: 
   p = p * (x4-x[j])/(x[i]-x[j]) 
 yp=yp+p*y[i] 
print('Interpolated value at ', x4, ' = ', yp) 
 
f = lagrange(x, y) 
fgr = plt.figure(figsize = (10,8)) 
plt.plot(xnew, f(xnew), 'blue') 
plt.title('Tymoshenko') 
plt.xlabel('xCheck') 
plt.ylabel('yCheck') 
plt.grid() 
plt.show()
